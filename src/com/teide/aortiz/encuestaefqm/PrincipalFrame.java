/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.teide.aortiz.encuestaefqm;

import com.teide.aortiz.encuestaefqm.bean.bbdd.DataBaseUtil;
import com.teide.aortiz.encuestaefqm.util.DataExtraction;
import com.teide.aortiz.encuestaefqm.util.ExcelUtil;
import java.io.File;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author antonio
 */
public class PrincipalFrame extends javax.swing.JFrame {

    public static final String DIR_GENERADOS = "Generados";
    
    /**
     * Creates new form PrincipalFrame
     */
    public PrincipalFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnSeleccionar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        año = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Seleccione la carpeta con los ficheros CSV");

        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        jLabel2.setText("Indique el año de la encuesta");

        try {
            año.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        año.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        area.setEditable(false);
        area.setColumns(20);
        area.setRows(5);
        area.setEnabled(false);
        jScrollPane1.setViewportView(area);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSeleccionar)
                            .addComponent(año, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(año, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnSeleccionar))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        // TODO add your handling code here:
        if (año.getText().trim().equals("/")) JOptionPane.showMessageDialog(this, "Debe indicar el año de la encuesta", "Error", JOptionPane.WARNING_MESSAGE);
        else {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jfc.setApproveButtonText("Seleccionar");
            jfc.setDialogTitle("Seleccione la carpeta que contenga todos los CSV");
            int opcion = jfc.showOpenDialog(this);
            if (opcion == JFileChooser.APPROVE_OPTION) {
                //Inicializando la encuesta
                inicializaEncuesta();
                area.append("Inicializando la encuesta ....\n");
                area.append("--------------------------------------------------\n");

                File dir = jfc.getSelectedFile();
                
                //Creamos la carpeta GENERADOS donde almacenar todos los Excel
                crearDirectorio(dir);
                                
                String[] ficheros = dir.list();
                for (String nombreFichero : ficheros) {
                    File fichero = new File (dir,nombreFichero);
                    //Solamente nos valdrán los ficheros con extesión CSV
                    if (fichero.isFile() && obtenerExtensionFichero(fichero).equalsIgnoreCase("csv")) {
                        area.append("Procesando el fichero "+fichero.getName()+"\n");
                        gestionaEncuesta(fichero, año.getText());
                        area.append("Fichero procesado\n");
                        area.append("--------------------------------------------------\n");
                    }
                }
                
                //Una vez finalizada la gesión de todos los ficheros, comenzaremos con la creación de los Excel
                gestionarExcel(año.getText(), dir.getAbsolutePath()+"/"+DIR_GENERADOS );
            }
        }
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    /**
     * Este método permtite generar la carpeta en la que se volcarán todos los Excel generados
     * @param f representa el fichero CSV que permitirá obtener la ruta en la que se encuentra
     * para así generar la carpeta en esa ruta
     */
    private void crearDirectorio (File f) {
        File dir = new File (f.getAbsolutePath()+"/"+DIR_GENERADOS);
        if (!dir.isDirectory()) dir.mkdir();
    }
    
    private String obtenerExtensionFichero (File f) {
        try {
            return (f.getName().split("\\."))[1];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            return " ";
        }
    }
    
    private boolean inicializaEncuesta () {
         try {
            //Este objeto nos permitirá realizar todas las acciones sobre BBDD
            DataBaseUtil dbu = new DataBaseUtil();
                        
            //En primer lugar insertaremos los responsables genéricos
            dbu.insertaResponsablesGenericos();   
            return true;
            
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Driver de la BBDD no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            //JOptionPane.showMessageDialog(this, "Error de BBDD al insertar los responsables genéricos\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
         return false;
    }
    
    private void gestionaEncuesta (File fichero, String curso) {
        int resultado = 0;
        DataBaseUtil dbu = null;
        DataExtraction de = null;
        try {
            dbu = new DataBaseUtil();
            de = new DataExtraction(fichero, curso);
            
            //Analizamos el CSV en busca de los responsables que se han encuestado en ese ciclo y curso
            de.analizaResponsables();
            area.append("Responsables analizados\n");

            //Insertamos el ciclo y curso que vamos a analizar
            dbu.insertarCiclo(de.getCiclo(), de.getCurso());
            area.append("Ciclo Insertado\n");
            resultado = 1;

            //Insertamos los responsables
            dbu.insertarResponsables(de.getNombresAnalizados());
            area.append("Responsables insertados\n");
            resultado = 2;

            //Insertamos los encuestados
            dbu.insertarEncuestados(de.getNombresAnalizados(), de.getCiclo(), de.getCurso());
            area.append("Encuestados por ciclo insertados\n");
            resultado = 3;

            //Insertamos y analizamos todas las respuestas
            de.analizarRespuestas(dbu);
            resultado = 4;

            //Insertamos todas las medias de las preguntas tipo Likert
            dbu.insertarMedias(de.getCiclo(), de.getCurso());
            area.append("Medias tipo Likert calculadas e insertadas\n");
            resultado = 5;

            //Insertamos los porcentajes de las respuestas tipo SI/NO
            dbu.insertaPorcentajes(de.getCiclo(), de.getCurso());
            area.append("Porcentajes de respuestas SI/NO calculadas e insertadas\n");
        }
        catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Driver de la BBDD no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error de BBDD\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            switch (resultado) {
                case 0: area.append("Error: "+de.getCiclo()+"("+de.getCurso()+") ya existía\n");break;
                case 1: area.append("Error al insertar los responsables de "+de.getCiclo()+"("+de.getCurso()+")\n");break;
                case 2: area.append("Error al insertar los encuestados de "+de.getCiclo()+"("+de.getCurso()+")\n");break;
                case 3: area.append("Error al insertar las respuestas de "+de.getCiclo()+"("+de.getCurso()+")\n");break;
                case 4: area.append("Error al insertar las medias de tipo Likert de "+de.getCiclo()+"("+de.getCurso()+")\n");break;
                case 5: area.append("Error al insertar las medias de tipo SI/NO de "+de.getCiclo()+"("+de.getCurso()+")\n");break;
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void gestionarExcel (String curso, String directorio) {
        try {
            ExcelUtil eu = new ExcelUtil(directorio);
            area.append("Creando el Excel de Profesores\n");
            gestionarExcelProfesores(curso, eu);
            area.append("Excel de Profesores creado correctamente\n");
            area.append("--------------------------------------------------\n");
            area.append("Creando el Excel de Comentarios de Profesores\n");
            gestionarExcelComentariosProfesores(curso, eu);
            area.append("Excel de Comentarios de Profesores creado correctamente\n");
            area.append("--------------------------------------------------\n");
            area.append("Creando el Excel de Equipo Directivo\n");
            gestionarExcelEquipoDirectivo(curso, eu);
            area.append("Excel de Equipo Directivo creado correctamente\n");
            area.append("--------------------------------------------------\n");
            area.append("Creando el Excel de Comentarios de Equipo Directivo\n");
            gestionarExcelComentariosEquipoDirectivo(curso, eu);
            area.append("Excel de Comentarios de Equipo Directivo creado correctamente\n");
            area.append("--------------------------------------------------\n");
            area.append("Creando el Excel de Secretaria\n");
            gestionarExcelSecretaria(curso, eu);
            area.append("Excel de Secretaria creado correctamente\n");
            area.append("--------------------------------------------------\n");
            area.append("Creando el Excel de Comentarios de Secretaria\n");
            gestionarExcelComentariosSecretaria(curso, eu);
            area.append("Excel de Comentarios de Secretaria creado correctamente\n");
            area.append("--------------------------------------------------\n");
            area.append("Creando el Excel de Orientación\n");
            gestionarExcelOrientacion(curso, eu);
            area.append("Excel de Orientación creado correctamente\n");
            area.append("--------------------------------------------------\n");
            area.append("Creando el Excel de Comentarios de Orientación\n");
            gestionarExcelComentariosOrientacion(curso, eu);
            area.append("Excel de Comentarios de Orientación creado correctamente\n");
            area.append("--------------------------------------------------\n");
        }
        catch (Exception e) {
           JOptionPane.showMessageDialog(this, "Error durante la creación de las hojas Excel", "Error", JOptionPane.ERROR_MESSAGE);
           e.printStackTrace();
        }
    }
    
    private void gestionarExcelProfesores (String curso, ExcelUtil eu) throws Exception {
        eu.hojaProfesores(curso);
    }
    
    private void gestionarExcelComentariosProfesores (String curso, ExcelUtil eu) throws Exception {
        eu.hojaComentariosProfesores(curso);
    }
    
    private void gestionarExcelEquipoDirectivo (String curso, ExcelUtil eu) throws Exception {
        eu.hojaEquipoDirectivo(curso);
    }
    
    private void gestionarExcelComentariosEquipoDirectivo (String curso, ExcelUtil eu) throws Exception {
        eu.hojaComentariosEquipoDirectivo(curso);
    }
     
    private void gestionarExcelSecretaria (String curso, ExcelUtil eu) throws Exception {
        eu.hojaSecretaria(curso);
    }
    
    private void gestionarExcelComentariosSecretaria (String curso, ExcelUtil eu) throws Exception {
        eu.hojaComentariosSecretaria(curso);
    }
     
    private void gestionarExcelOrientacion (String curso, ExcelUtil eu) throws Exception {
        eu.hojaOrientacion(curso);
    }
    
    private void gestionarExcelComentariosOrientacion (String curso, ExcelUtil eu) throws Exception {
        eu.hojaComentariosOrientacion(curso);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area;
    private javax.swing.JFormattedTextField año;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
